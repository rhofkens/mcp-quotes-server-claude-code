
> mcp-quotes-server@0.1.0 test
> jest

ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do
transform: {
    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],
},
See more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced
FAIL tests/unit/utils/config.test.ts (8.268 s)
  ‚óè Configuration Management ‚Ä∫ getConfig ‚Ä∫ should throw error when SERPER_API_KEY is missing

    expect(received).toThrow(expected)

    Expected substring: "SERPER_API_KEY is required"
    Received message:   "Configuration validation failed:
    serperApiKey: Required"

          80 |       }).join('\n');
          81 |       
        > 82 |       throw new Error(`Configuration validation failed:\n${errorMessages}`);
             |             ^
          83 |     }
          84 |     
          85 |     throw error;

      at loadConfig (src/utils/config.ts:82:13)
      at getConfig (src/utils/config.ts:100:22)
      at tests/unit/utils/config.test.ts:47:29
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)
      at Object.<anonymous> (tests/unit/utils/config.test.ts:47:33)
      at Object.<anonymous> (tests/unit/utils/config.test.ts:47:33)

  ‚óè Configuration Management ‚Ä∫ getConfig ‚Ä∫ should use default values when optional env vars are not set

    expect(received).toBe(expected) // Object.is equality

    Expected: "development"
    Received: "test"

      53 |       const config = getConfig();
      54 |       
    > 55 |       expect(config.nodeEnv).toBe('development');
         |                              ^
      56 |       expect(config.logLevel).toBe('info');
      57 |       expect(config.serverPort).toBe(3000);
      58 |       expect(config.serverHost).toBe('localhost');

      at Object.<anonymous> (tests/unit/utils/config.test.ts:55:30)

FAIL tests/unit/utils/errors.enhanced.test.ts
  ‚óè Enhanced Error Messages ‚Ä∫ APIError ‚Ä∫ should provide rate limit recovery steps

    expect(received).toContain(expected) // indexOf

    Expected substring: "reduce the number"
    Received string:    "Rate limit exceeded (serper). Please wait a few minutes before making more requests. Consider reducing the number of quotes requested."

      115 |       
      116 |       expect(message).toContain('wait a few minutes');
    > 117 |       expect(message).toContain('reduce the number');
          |                       ^
      118 |       expect(message).toContain('quotes requested');
      119 |     });
      120 |     

      at Object.<anonymous> (tests/unit/utils/errors.enhanced.test.ts:117:23)

  ‚óè Enhanced Error Messages ‚Ä∫ Development vs Production Messages ‚Ä∫ should include stack traces in development

    expect(received).toBeDefined()

    Received: undefined

      307 |       const json = error.toJSON();
      308 |       
    > 309 |       expect(json['stack']).toBeDefined();
          |                             ^
      310 |     });
      311 |     
      312 |     it('should exclude stack traces in production', () => {

      at Object.<anonymous> (tests/unit/utils/errors.enhanced.test.ts:309:29)

FAIL tests/unit/utils/errors.test.ts
  ‚óè Error Handling Utilities ‚Ä∫ MCPError ‚Ä∫ should provide user-friendly messages for MCP errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "The requested method is not available"
    Received: "The requested method is not available. Please check the available tools: getQuotes, or resources: quotes://prompt-template"

      80 |     it('should provide user-friendly messages for MCP errors', () => {
      81 |       const methodNotFound = new MCPError('Method not found', ErrorCode.MCP_METHOD_NOT_FOUND);
    > 82 |       expect(methodNotFound.getUserMessage()).toBe('The requested method is not available');
         |                                               ^
      83 |       
      84 |       const invalidParams = new MCPError('Invalid params', ErrorCode.MCP_INVALID_PARAMS);
      85 |       expect(invalidParams.getUserMessage()).toBe('Invalid parameters provided');

      at Object.<anonymous> (tests/unit/utils/errors.test.ts:82:47)

  ‚óè Error Handling Utilities ‚Ä∫ ValidationError ‚Ä∫ should format user message with field name

    expect(received).toBe(expected) // Object.is equality

    Expected: "Invalid value for field 'userEmail': must be a valid email"
    Received: "Invalid value for field 'userEmail': must be a valid email. Please refer to the prompt template resource for the correct format."

      107 |       const error = new ValidationError('must be a valid email', 'userEmail');
      108 |       
    > 109 |       expect(error.getUserMessage()).toBe("Invalid value for field 'userEmail': must be a valid email");
          |                                      ^
      110 |     });
      111 |     
      112 |     it('should format user message without field name', () => {

      at Object.<anonymous> (tests/unit/utils/errors.test.ts:109:38)

  ‚óè Error Handling Utilities ‚Ä∫ ValidationError ‚Ä∫ should format user message without field name

    expect(received).toBe(expected) // Object.is equality

    Expected: "Validation error: Invalid input format"
    Received: "Validation error: Invalid input format. Please check that all required parameters are provided correctly."

      113 |       const error = new ValidationError('Invalid input format');
      114 |       
    > 115 |       expect(error.getUserMessage()).toBe('Validation error: Invalid input format');
          |                                      ^
      116 |     });
      117 |   });
      118 |   

      at Object.<anonymous> (tests/unit/utils/errors.test.ts:115:38)

  ‚óè Error Handling Utilities ‚Ä∫ APIError ‚Ä∫ should provide user-friendly messages for API errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "The request timed out. Please try again."
    Received: "The request timed out. This may be due to network issues or server load. Please try again in a few moments."

      150 |     it('should provide user-friendly messages for API errors', () => {
      151 |       const timeout = new APIError('Timeout', ErrorCode.API_TIMEOUT);
    > 152 |       expect(timeout.getUserMessage()).toBe('The request timed out. Please try again.');
          |                                        ^
      153 |       
      154 |       const rateLimit = new APIError('Rate limit', ErrorCode.API_RATE_LIMIT);
      155 |       expect(rateLimit.getUserMessage()).toBe('Rate limit exceeded. Please try again later.');

      at Object.<anonymous> (tests/unit/utils/errors.test.ts:152:40)

  ‚óè Error Handling Utilities ‚Ä∫ ConfigError ‚Ä∫ should format user message with variable name

    expect(received).toBe(expected) // Object.is equality

    Expected: "Configuration error: Missing or invalid API_KEY"
    Received: "Configuration error: Missing or invalid API_KEY. Please check the documentation for the correct configuration format."

      179 |       const error = new ConfigError('Not set', 'API_KEY');
      180 |       
    > 181 |       expect(error.getUserMessage()).toBe('Configuration error: Missing or invalid API_KEY');
          |                                      ^
      182 |     });
      183 |     
      184 |     it('should format user message without variable name', () => {

      at Object.<anonymous> (tests/unit/utils/errors.test.ts:181:38)

  ‚óè Error Handling Utilities ‚Ä∫ ConfigError ‚Ä∫ should format user message without variable name

    expect(received).toBe(expected) // Object.is equality

    Expected: "Configuration error: Please check your environment settings"
    Received: "Configuration error: Please check your environment settings. Ensure SERPER_API_KEY is set in your environment or .env file."

      185 |       const error = new ConfigError('Invalid configuration');
      186 |       
    > 187 |       expect(error.getUserMessage()).toBe('Configuration error: Please check your environment settings');
          |                                      ^
      188 |     });
      189 |   });
      190 |   

      at Object.<anonymous> (tests/unit/utils/errors.test.ts:187:38)

  ‚óè Error Handling Utilities ‚Ä∫ ErrorFormatter ‚Ä∫ should format error for user display

    expect(received).toBe(expected) // Object.is equality

    Expected: "Invalid value for field 'email': Invalid input"
    Received: "Invalid value for field 'email': Invalid input. Please refer to the prompt template resource for the correct format."

      226 |       const baseError = new ValidationError('Invalid input', 'email');
      227 |       expect(ErrorFormatter.formatForUser(baseError))
    > 228 |         .toBe("Invalid value for field 'email': Invalid input");
          |          ^
      229 |       
      230 |       const regularError = new Error('Technical details');
      231 |       expect(ErrorFormatter.formatForUser(regularError))

      at Object.<anonymous> (tests/unit/utils/errors.test.ts:228:10)

PASS tests/unit/tools/getQuotes.test.ts
PASS tests/unit/utils/validation.test.ts
PASS tests/unit/utils/logger.test.ts
FAIL tests/unit/services/serperClient.test.ts
  ‚óè Test suite failed to run

    [96mtests/unit/services/serperClient.test.ts[0m:[93m11[0m:[93m15[0m - [91merror[0m[90m TS6196: [0m'Quote' is declared but never used.

    [7m11[0m import type { Quote, SerperApiResponse } from '../../../src/types/quotes.js';
    [7m  [0m [91m              ~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m153[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m153[0m       expect(quotes[0].source).toBeUndefined();
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m153[0m:[93m24[0m - [91merror[0m[90m TS2339: [0mProperty 'source' does not exist on type 'SerperSearchResult'.

    [7m153[0m       expect(quotes[0].source).toBeUndefined();
    [7m   [0m [91m                       ~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m184[0m:[93m22[0m - [91merror[0m[90m TS2339: [0mProperty 'text' does not exist on type 'SerperSearchResult'.

    [7m184[0m         expect(quote.text).toBeTruthy();
    [7m   [0m [91m                     ~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m185[0m:[93m22[0m - [91merror[0m[90m TS2339: [0mProperty 'author' does not exist on type 'SerperSearchResult'.

    [7m185[0m         expect(quote.author).toBe('Author Name');
    [7m   [0m [91m                     ~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m193[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'callArgs' is possibly 'undefined'.

    [7m193[0m       expect(callArgs[1].q).toBe('Albert Einstein quotes');
    [7m   [0m [91m             ~~~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m193[0m:[93m14[0m - [91merror[0m[90m TS2571: [0mObject is of type 'unknown'.

    [7m193[0m       expect(callArgs[1].q).toBe('Albert Einstein quotes');
    [7m   [0m [91m             ~~~~~~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m200[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'callArgs' is possibly 'undefined'.

    [7m200[0m       expect(callArgs[1].q).toBe('Einstein quotes about physics & relativity');
    [7m   [0m [91m             ~~~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m200[0m:[93m14[0m - [91merror[0m[90m TS2571: [0mObject is of type 'unknown'.

    [7m200[0m       expect(callArgs[1].q).toBe('Einstein quotes about physics & relativity');
    [7m   [0m [91m             ~~~~~~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m289[0m:[93m58[0m - [91merror[0m[90m TS2554: [0mExpected 1 arguments, but got 2.

    [7m289[0m       const quotes = await client.searchQuotes('Author', 3);
    [7m   [0m [91m                                                         ~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m293[0m:[93m14[0m - [91merror[0m[90m TS2532: [0mObject is possibly 'undefined'.

    [7m293[0m       expect(quotes[0].text).toBe('Valid quote');
    [7m   [0m [91m             ~~~~~~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m293[0m:[93m24[0m - [91merror[0m[90m TS2339: [0mProperty 'text' does not exist on type 'SerperSearchResult'.

    [7m293[0m       expect(quotes[0].text).toBe('Valid quote');
    [7m   [0m [91m                       ~~~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m355[0m:[93m43[0m - [91merror[0m[90m TS2554: [0mExpected 1 arguments, but got 2.

    [7m355[0m       await client.searchQuotes(longName, 1);
    [7m   [0m [91m                                          ~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m367[0m:[93m57[0m - [91merror[0m[90m TS2554: [0mExpected 1 arguments, but got 2.

    [7m367[0m       await client.searchQuotes("O'Brien & Associates", 1);
    [7m   [0m [91m                                                        ~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m390[0m:[93m58[0m - [91merror[0m[90m TS2554: [0mExpected 1 arguments, but got 2.

    [7m390[0m       const quotes = await client.searchQuotes('Author', 10);
    [7m   [0m [91m                                                         ~~[0m
    [96mtests/unit/services/serperClient.test.ts[0m:[93m399[0m:[93m40[0m - [91merror[0m[90m TS2304: [0mCannot find name 'validResponse'.

    [7m399[0m         .mockResolvedValueOnce({ data: validResponse });
    [7m   [0m [91m                                       ~~~~~~~~~~~~~[0m

FAIL tests/unit/resources/promptTemplate.test.ts
  ‚óè Test suite failed to run

    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m258[0m:[93m32[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string | undefined' is not assignable to parameter of type 'string'.
      Type 'undefined' is not assignable to type 'string'.

    [7m258[0m             referencedVars.add(match[1]);
    [7m   [0m [91m                               ~~~~~~~~[0m
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m299[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'template' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m299[0m       const template = response.template;
    [7m   [0m [91m                                ~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m299[0m:[93m33[0m
        [7m299[0m       const template = response.template;
        [7m   [0m [96m                                ~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m310[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'template' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m310[0m       const template = response.template;
    [7m   [0m [91m                                ~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m310[0m:[93m33[0m
        [7m310[0m       const template = response.template;
        [7m   [0m [96m                                ~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m319[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'template' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m319[0m       const template = response.template;
    [7m   [0m [91m                                ~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m319[0m:[93m33[0m
        [7m319[0m       const template = response.template;
        [7m   [0m [96m                                ~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m336[0m:[93m17[0m - [91merror[0m[90m TS2339: [0mProperty 'variables' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m336[0m       response1.variables.push({
    [7m   [0m [91m                ~~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m336[0m:[93m17[0m
        [7m336[0m       response1.variables.push({
        [7m   [0m [96m                ~~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m342[0m:[93m24[0m - [91merror[0m[90m TS2339: [0mProperty 'variables' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m342[0m       expect(response2.variables).toHaveLength(4);
    [7m   [0m [91m                       ~~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m342[0m:[93m24[0m
        [7m342[0m       expect(response2.variables).toHaveLength(4);
        [7m   [0m [96m                       ~~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m347[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'template' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m347[0m       const template = response.template;
    [7m   [0m [91m                                ~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m347[0m:[93m33[0m
        [7m347[0m       const template = response.template;
        [7m   [0m [96m                                ~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m361[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'template' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m361[0m       const template = response.template;
    [7m   [0m [91m                                ~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m361[0m:[93m33[0m
        [7m361[0m       const template = response.template;
        [7m   [0m [96m                                ~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m370[0m:[93m33[0m - [91merror[0m[90m TS2339: [0mProperty 'template' does not exist on type 'Promise<PromptTemplateResponse>'.

    [7m370[0m       const template = response.template;
    [7m   [0m [91m                                ~~~~~~~~[0m

      [96mtests/unit/resources/promptTemplate.test.ts[0m:[93m370[0m:[93m33[0m
        [7m370[0m       const template = response.template;
        [7m   [0m [96m                                ~~~~~~~~[0m
        Did you forget to use 'await'?

FAIL tests/unit/server.test.ts
  ‚óè Test suite failed to run

    [96mtests/unit/server.test.ts[0m:[93m15[0m:[93m40[0m - [91merror[0m[90m TS2345: [0mArgument of type 'undefined' is not assignable to parameter of type 'never'.

    [7m15[0m     start: jest.fn().mockResolvedValue(undefined),
    [7m  [0m [91m                                       ~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m16[0m:[93m40[0m - [91merror[0m[90m TS2345: [0mArgument of type 'undefined' is not assignable to parameter of type 'never'.

    [7m16[0m     close: jest.fn().mockResolvedValue(undefined)
    [7m  [0m [91m                                       ~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m28[0m:[93m48[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ quotes: never[]; }' is not assignable to parameter of type 'never'.

    [7m28[0m   handleGetQuotes: jest.fn().mockResolvedValue({ quotes: [] })
    [7m  [0m [91m                                               ~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m39[0m:[93m53[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ template: string; variables: never[]; }' is not assignable to parameter of type 'never'.

    [7m39[0m   handlePromptTemplate: jest.fn().mockResolvedValue({
    [7m  [0m [91m                                                    ~[0m
    [7m40[0m     template: 'test template',
    [7m  [0m [91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [7m41[0m     variables: []
    [7m  [0m [91m~~~~~~~~~~~~~~~~~[0m
    [7m42[0m   })
    [7m  [0m [91m~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m118[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m118[0m         .find(call => call[0] === 'tools/list')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m122[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 0.

    [7m122[0m       const result = await listHandler!();
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m37[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                    ~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'request' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m137[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m137[0m         .find(call => call[0] === 'tools/call')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m143[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m143[0m       const result = await callHandler!({
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m168[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m168[0m         .find(call => call[0] === 'tools/call')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m170[0m:[93m20[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m170[0m       await expect(callHandler!({
    [7m   [0m [91m                   ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m181[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m181[0m         .find(call => call[0] === 'tools/call')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m183[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m183[0m       const result = await callHandler!({
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m191[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'content' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'content' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m191[0m       expect(result.content[0].text).toContain('Error searching quotes');
    [7m   [0m [91m                    ~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m192[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'content' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'content' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m192[0m       expect(result.content[0].text).toContain('API error');
    [7m   [0m [91m                    ~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m199[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m199[0m         .find(call => call[0] === 'resources/list')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m203[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 0.

    [7m203[0m       const result = await listHandler!();
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m37[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                    ~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'request' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m219[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m219[0m         .find(call => call[0] === 'resources/read')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m225[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m225[0m       const result = await readHandler!({
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m244[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m244[0m         .find(call => call[0] === 'resources/read')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m246[0m:[93m20[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m246[0m       await expect(readHandler!({
    [7m   [0m [91m                   ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m256[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m256[0m         .find(call => call[0] === 'resources/read')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m258[0m:[93m20[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m258[0m       await expect(readHandler!({
    [7m   [0m [91m                   ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m268[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'start' does not exist on type 'MockedObject<Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>>'.

    [7m268[0m       expect(mockMcpServer.start).toHaveBeenCalled();
    [7m   [0m [91m                           ~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m276[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'start' does not exist on type 'MockedObject<Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>>'.

    [7m276[0m       expect(mockMcpServer.start).toHaveBeenCalledTimes(1);
    [7m   [0m [91m                           ~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m294[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'start' does not exist on type 'MockedObject<Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>>'.

    [7m294[0m       mockMcpServer.start.mockRejectedValueOnce(new Error('Start failed'));
    [7m   [0m [91m                    ~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m313[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m313[0m         .find(call => call[0] === 'tools/call')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m315[0m:[93m20[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m315[0m       await expect(callHandler!({
    [7m   [0m [91m                   ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m323[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m323[0m         .find(call => call[0] === 'tools/call')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m325[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m325[0m       const result = await callHandler!({
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m330[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'content' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'content' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m330[0m       expect(result.content[0].text).toContain('Error');
    [7m   [0m [91m                    ~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m335[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m335[0m         .find(call => call[0] === 'tools/call')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m338[0m:[93m9[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m338[0m         callHandler!({
    [7m   [0m [91m        ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m351[0m:[93m23[0m - [91merror[0m[90m TS2339: [0mProperty 'content' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'content' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m351[0m         expect(result.content).toBeDefined();
    [7m   [0m [91m                      ~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m360[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m360[0m         .find(call => call[0] === 'tools/list')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m362[0m:[93m31[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 0.

    [7m362[0m       const toolsList = await listHandler!();
    [7m   [0m [91m                              ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m37[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                    ~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'request' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m363[0m:[93m24[0m - [91merror[0m[90m TS2339: [0mProperty 'tools' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'tools' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m363[0m       expect(toolsList.tools).toHaveLength(1);
    [7m   [0m [91m                       ~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m367[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m367[0m         .find(call => call[0] === 'tools/call')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m369[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m369[0m       const result = await callHandler!({
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m370[0m:[93m25[0m - [91merror[0m[90m TS2339: [0mProperty 'tools' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'tools' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m370[0m         name: toolsList.tools[0].name,
    [7m   [0m [91m                        ~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m377[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'content' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'content' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m377[0m       expect(result.content).toBeDefined();
    [7m   [0m [91m                    ~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m383[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m383[0m         .find(call => call[0] === 'resources/list')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m385[0m:[93m35[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 0.

    [7m385[0m       const resourcesList = await listHandler!();
    [7m   [0m [91m                                  ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m37[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                    ~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'request' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m386[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'resources' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'resources' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m386[0m       expect(resourcesList.resources).toHaveLength(1);
    [7m   [0m [91m                           ~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m390[0m:[93m23[0m - [91merror[0m[90m TS2367: [0mThis comparison appears to be unintentional because the types 'ZodObject<{ method: ZodLiteral<string>; }, UnknownKeysParam, ZodTypeAny, { method: string; }, { method: string; }>' and 'string' have no overlap.

    [7m390[0m         .find(call => call[0] === 'resources/read')?.[1];
    [7m   [0m [91m                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m392[0m:[93m28[0m - [91merror[0m[90m TS2554: [0mExpected 2 arguments, but got 1.

    [7m392[0m       const result = await readHandler!({
    [7m   [0m [91m                           ~~~~~~~~~~~~[0m

      [96mnode_modules/@modelcontextprotocol/sdk/dist/shared/protocol.d.ts[0m:[93m139[0m:[93m58[0m
        [7m139[0m     }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra) => SendResultT | Promise<SendResultT>): void;
        [7m   [0m [96m                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        An argument for 'extra' was not provided.
    [96mtests/unit/server.test.ts[0m:[93m393[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'resources' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'resources' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m393[0m         uri: resourcesList.resources[0].uri
    [7m   [0m [91m                           ~~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m396[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'contents' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'contents' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m396[0m       expect(result.contents).toBeDefined();
    [7m   [0m [91m                    ~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m397[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'contents' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'contents' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m397[0m       expect(result.contents[0].uri).toBe(resourcesList.resources[0].uri);
    [7m   [0m [91m                    ~~~~~~~~[0m
    [96mtests/unit/server.test.ts[0m:[93m397[0m:[93m57[0m - [91merror[0m[90m TS2339: [0mProperty 'resources' does not exist on type 'objectOutputType<{ _meta: ZodOptional<ZodObject<{}, "passthrough", ZodTypeAny, objectOutputType<{}, ZodTypeAny, "passthrough">, objectInputType<{}, ZodTypeAny, "passthrough">>>; }, ZodTypeAny, "passthrough"> | ... 9 more ... | objectOutputType<...>'.
      Property 'resources' does not exist on type '{ _meta?: objectOutputType<{}, ZodTypeAny, "passthrough"> | undefined; }'.

    [7m397[0m       expect(result.contents[0].uri).toBe(resourcesList.resources[0].uri);
    [7m   [0m [91m                                                        ~~~~~~~~~[0m

FAIL tests/integration/server.integration.test.ts
  ‚óè Test suite failed to run

    [96mtests/integration/server.integration.test.ts[0m:[93m40[0m:[93m7[0m - [91merror[0m[90m TS2740: [0mType 'QuotesServer' is missing the following properties from type 'Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>': _serverInfo, _capabilities, assertCapabilityForMethod, assertNotificationCapability, and 33 more.

    [7m40[0m       server = await createQuotesServer();
    [7m  [0m [91m      ~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m67[0m:[93m7[0m - [91merror[0m[90m TS2740: [0mType 'QuotesServer' is missing the following properties from type 'Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>': _serverInfo, _capabilities, assertCapabilityForMethod, assertNotificationCapability, and 33 more.

    [7m67[0m       server = await createQuotesServer();
    [7m  [0m [91m      ~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m92[0m:[93m7[0m - [91merror[0m[90m TS2740: [0mType 'QuotesServer' is missing the following properties from type 'Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>': _serverInfo, _capabilities, assertCapabilityForMethod, assertNotificationCapability, and 33 more.

    [7m92[0m       server = await createQuotesServer();
    [7m  [0m [91m      ~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m122[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'promptTemplateResource' is possibly 'undefined'.

    [7m122[0m       expect(promptTemplateResource.name).toBe('Quote Request Template');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m123[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'promptTemplateResource' is possibly 'undefined'.

    [7m123[0m       expect(promptTemplateResource.mimeType).toBe('application/json');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m124[0m:[93m14[0m - [91merror[0m[90m TS18048: [0m'promptTemplateResource' is possibly 'undefined'.

    [7m124[0m       expect(promptTemplateResource.description).toContain('template');
    [7m   [0m [91m             ~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m168[0m:[93m7[0m - [91merror[0m[90m TS2740: [0mType 'QuotesServer' is missing the following properties from type 'Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>': _serverInfo, _capabilities, assertCapabilityForMethod, assertNotificationCapability, and 33 more.

    [7m168[0m       server = await createQuotesServer();
    [7m   [0m [91m      ~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m174[0m:[93m53[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ snippet: string; link: string; }[]' is not assignable to parameter of type 'never'.

    [7m174[0m           searchQuotes: jest.fn().mockResolvedValue([
    [7m   [0m [91m                                                    ~[0m
    [7m175[0m             {
    [7m   [0m [91m~~~~~~~~~~~~~[0m
    [7m...[0m 
    [7m178[0m             }
    [7m   [0m [91m~~~~~~~~~~~~~[0m
    [7m179[0m           ]),
    [7m   [0m [91m~~~~~~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m247[0m:[93m7[0m - [91merror[0m[90m TS2740: [0mType 'QuotesServer' is missing the following properties from type 'Server<{ method: string; params?: objectOutputType<{ _meta: ZodOptional<ZodObject<{ progressToken: ZodOptional<ZodUnion<[ZodString, ZodNumber]>>; }, "passthrough", ZodTypeAny, objectOutputType<...>, objectInputType<...>>>; }, ZodTypeAny, "passthrough"> | undefined; }, { ...; }, objectOutputType<...>>': _serverInfo, _capabilities, assertCapabilityForMethod, assertNotificationCapability, and 33 more.

    [7m247[0m       server = await createQuotesServer();
    [7m   [0m [91m      ~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m262[0m:[93m29[0m - [91merror[0m[90m TS2722: [0mCannot invoke an object which is possibly 'undefined'.

    [7m262[0m       const content = await promptTemplateHandler();
    [7m   [0m [91m                            ~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m262[0m:[93m29[0m - [91merror[0m[90m TS18048: [0m'promptTemplateHandler' is possibly 'undefined'.

    [7m262[0m       const content = await promptTemplateHandler();
    [7m   [0m [91m                            ~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m285[0m:[93m29[0m - [91merror[0m[90m TS2722: [0mCannot invoke an object which is possibly 'undefined'.

    [7m285[0m       const content = await promptTemplateHandler();
    [7m   [0m [91m                            ~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtests/integration/server.integration.test.ts[0m:[93m285[0m:[93m29[0m - [91merror[0m[90m TS18048: [0m'promptTemplateHandler' is possibly 'undefined'.

    [7m285[0m       const content = await promptTemplateHandler();
    [7m   [0m [91m                            ~~~~~~~~~~~~~~~~~~~~~[0m

Test Suites: 7 failed, 3 passed, 10 total
Tests:       11 failed, 136 passed, 147 total
Snapshots:   0 total
Time:        18.795 s
Ran all test suites.
Jest did not exit one second after the test run has completed.

'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.
